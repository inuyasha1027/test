
1.变量
   $a = "aaaa";
   $b = 3;
   echo $a.$b     aaaa3

1.1 全局变量
  谨慎使用,但要巧用,全局变量到这里就行了,不要再多用了

  $a = "aaa";
  function getMe() {
    global $a;
    echo $a; // 这里会输出全局变量的值
  }

1.1 include , require
    include 出错了也会继续执行下去
    require 出错了就断开了. 适合通用方法必须要加载执行成功的代码 

1.2 Array
    array('k1'=>'v1', 'k2' => 'v2' ....)
    array('a', 'b', 'c') == array(0=>'a', 1=>'b', 2=>'c')

    var_export() // to see an array when debug

    foreach($array as $entry)
      $entry['username']
    foreach($array as $key => $value)


    array[] = object; // == push back
    array_push()  // push back
    array_unshift() // push font


1.3 For循环
   for ($i=0; $i<=xx; $i++)
   foreach ($array as $entry)
   foreach ($array as $key => $value)
   while (一个表达式)

1.1 
	_SERVER["PHP_SELF"]
	localhost/index.php?id=3
 	获取自己的路径 /index.php ,注意带着/ ,而且忽略id什么的 


 2. 网页参数
    #) $_GET
    	$get_id = $_GET["id"]

    #) $_POST
    #) Isset的用法

3. class 类名 {
		private $变量
		function 类名(); // 构造函数 或者__contruct()
	}

	内部: $this->变量名
	外部: $u = new user(); echo $u->username;


 	了解php很强大的魔力函数
 	__get
 	__set
 	__cal

3. 接口 interface

  interface Boss {
    public function getMoney();
    public function working();
    public function fuckOut();
  }


 抽象类 abstract
  abstract class Manager implements Boss {
    public function getMoney()
    {

    }

    absctract function working();

    public function fuckOut()
    {

    }
  }

  普通类
  class Coder extends Manager {
    public function getMoney() {

    }

    public function working() {

    }

    public function fuckOUt() {

    }
  }

 4. debug
 	var_export($user->userinfo); 输出变量所有的值,对数组很有效

 5. 第7讲是讲的CSS,非常好
 	6个一样的字母可以缩写为3个 #fffffff == #fff
    #fff 白色
    #ddd 浅灰 
    #F5F5F5 比较浅颜色的灰色,用来做输入框的背景颜色
    #9c9c9c 比grey稍微深一点的颜色 

6. Cookie
  setcookie("key", "value", 持续时间, 路径)
  $_COOKIE["key"]

# 虚拟类
1. 并不用实例化具体某个类
2. 通过配置文件读取来产生虚拟类写法
  $c = new myClass("lib/myclassconf/users.xml")
  $c->userClass; // 这一步把$c变成一个userClass类
  $ret=$c->user_reg(); // 直接执行一个不存在的方法

# 读取文件
