
1. 	php >= 5.3
	mysql >= 5.0
	apache >= 2.2

2. IDE
	Hbuilder

3. xampp  x + apache + mysql + php + python

4. jquery (bootstrap as UI)

5. 安全设计
	1) 只有根目录下的 index.php 和制定目录下的 *.php可以被外部直接访问
	2) 其余指定目录(可以配置)中 静态资源可以被外部访问，例如js,图片

6. index.php (主目录下的)应该干什么
	1) 加载全框架配置文件(譬如路径,数据库密码等)
		可以再apache设置.conf文件不能访问
	2) 保证所有的请求(访问)都需要通过index.php来拦截(这里涉及到一些参数处理如 $_POST 和 $_GET)
	3) 加载全局通用函数.供各个页面可以随时调用
	4) 统一控制controller
	5) 根据controller的程序来加载相应的view
	6) 加载相应的插件

7. 订制一个访问规则(重要)
	http://xxxx/index.php?controller=XXX&action=XX
	代表index.php会根据这两个参数去寻找相应的controller类,同时action代表在这个controller类中药执行
	的方法,并且由index.php来 代为 执行.

8. 简历一个全局函数库
	在common下建立一个文件叫 functions.inc
	在index.php里去include他

9. 建立controller主控类
	在mvc/controller中建立一个_Master.inc,并写上
	abstract class _Master
	{

	}
	今后我们任何一个controller类都要集成他


lesson 04

所谓的拦截
php现有的流行的mvc框架中是采用单一入口文件来完成这个功能的,因为入口只有一个,自然可以实现过滤拦截的概念(包括get和post)

	http://localhost/index.php?controller=index&action=showindex

lesson 05
	我们使用 .htaccess 文件来固化访问方式

	http://xxx.com/index/showindex/

	1) 在 apache 中增加支持
	打开配置文件 httpd.conf 找到,
	LoadModule rewrite_module modules/mod_rewrite.so
	取消注释

	并在对应的目录权限中设置

	<Directory "D:\dev\repo\test\third_party\php\xphp\xphp">

    Options Indexes FollowSymLinks Includes ExecCGI

    AllowOverride All // 加上这句话

    Require all granted
	</Directory>

lesson 06
	思考点
	1.普通 controller不应该自己搭配模板路径来加载(太脏)
	2. 目前在controller中定义的变量无法再模板(view)中引用到

	本课时搞定第一点
	1.在 _Master中
		1) 新增一个变量 $_view
		2) 新增一个方法 $setView()
		3) 新增一个方法 $getView()
 	2. 修改index.php(根目录下的路由文件)
 		1) 增加判断control文件是否存在的程序
 		2) 增加判断control文件所属的类是否存在的程序
 		3) 对action参数进行判断
 		4) 在具体的index.inc中 尝试调用 $this->setView